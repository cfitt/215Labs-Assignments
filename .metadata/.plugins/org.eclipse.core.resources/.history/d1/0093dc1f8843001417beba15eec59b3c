package lab5.linkedlists;

public class QueueImpl2 implements Queue {

	protected LinkedNode head;
	protected LinkedNode tail;
	protected int length;
	
	public QueueImpl2() {
		head = null;
		tail = null;
		length = 0;
	}
	
	public void enqueue(String stringData) {
		LinkedNode newNode = new LinkedNodeImpl(stringData, null);
		if(tail == null){
			tail = newNode;
			head = tail;
		} else {
			tail.setNextNode(newNode);
			tail = newNode;
		} 
		length++;
	}

	public String dequeue() {
		String current = "";
		if(head == null)
			System.out.println("Queue is empty");
		else if(head == tail){//one elm
			current = head.getString();
			head = null;
		} else {
			current = head.getString();
			head = head.getNextNode();
		}
		return current;
	}

	//public String getFront() {	}

	public int getLength() {
		return length;
	}

	public void clear() {
		LinkedNode current = head;
		while (current.getNextNode() != null) {
			tail = null;
			current = current.getNextNode();
			head = current;
		}
		length = 0;
		head.setString(null);
		head.setNextNode(null);
		System.out.println("Queue Cleared\n");
	}

	public String toString() {
		String Qval = "Queue (Head to Tail): \n";
		LinkedNode current = head;
		if (current == null)
			Qval += "Current Node is empty \n";
		else if (current.getString() == null)
			Qval += "Data is empty \n";
		else {
			Qval += current.getString() + "\n";
			while (current.getNextNode() != null) {
				current = current.getNextNode();
				if (current.getString() != null)
					Qval += current.getString() + "\n";
			}
		}
		System.out.println(Qval);
		return Qval;
	}
}	

